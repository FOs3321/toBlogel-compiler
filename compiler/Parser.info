-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Parser.y
-----------------------------------------------------------------------------

state 99 contains 2 reduce/reduce conflicts.
state 107 contains 2 reduce/reduce conflicts.

rule 42 is unused
rule 43 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> programSpec                       (0)
	programSpec -> mainDef funDefs                     (1)
	funDefs ->                                         (2)
	funDefs -> funDefs funDef                          (3)
	funDef -> var '=' expr ';'                         (4)
	mainDef -> fun '(' ')' '{' statements '}'          (5)
	statements -> statement                            (6)
	statements -> statements statement                 (7)
	statement -> var '=' expr ';'                      (8)
	statement -> 'if' '(' expr ')' 'then' '{' statements '}' 'else' '{' statements '}'   (9)
	statement -> 'if' '(' expr ')' 'then' '{' statements '}'   (10)
	statement -> 'while' '(' expr ')' '{' statements '}'   (11)
	statement -> 'return' var ';'                      (12)
	expr -> expr4                                      (13)
	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' 'else' '{' expr3 '}'   (14)
	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}'   (15)
	expr4 -> expr3                                     (16)
	expr3 -> expr3 '!!' expr3                          (17)
	expr3 -> expr3 '&&' expr3                          (18)
	expr3 -> expr3 CMP expr3                           (19)
	expr3 -> expr3 '+' expr3                           (20)
	expr3 -> expr3 '-' expr3                           (21)
	expr3 -> expr3 '*' expr3                           (22)
	expr3 -> expr3 '/' expr3                           (23)
	expr3 -> expr2                                     (24)
	expr2 -> '-' expr1                                 (25)
	expr2 -> 'not' expr1                               (26)
	expr2 -> expr1                                     (27)
	expr1 -> agg '[' expr '|' gen inExprs ']'          (28)
	expr1 -> expr0                                     (29)
	expr0 -> const                                     (30)
	expr0 -> '(' expr ')'                              (31)
	expr0 -> var                                       (32)
	inExprs ->                                         (33)
	inExprs -> inExprs ',' inExpr                      (34)
	inExpr -> var 'in' expr                            (35)
	agg -> 'minimum'                                   (36)
	agg -> 'maximum'                                   (37)
	agg -> 'sum'                                       (38)
	agg -> 'prod'                                      (39)
	agg -> 'and'                                       (40)
	agg -> 'or'                                        (41)
	gen -> var '<-' 'nvals' 'V'                        (42)
	gen -> var '<-' 'V'                                (43)
	gen -> var '<-' 'nvals' expr1                      (44)
	gen -> var '<-' expr1                              (45)
	const -> INT                                       (46)
	const -> DOUBLE                                    (47)
	const -> BOOL                                      (48)
	const -> 'V'                                       (49)
	const -> 'empty'                                   (50)
	fun -> STRING                                      (51)
	var -> STRING                                      (52)
	var -> UPPER                                       (53)
	var -> STRING '(' var ')'                          (54)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	INT            { TokenInt $$ }
	DOUBLE         { TokenDouble $$ }
	BOOL           { TokenBool $$ }
	'empty'        { TokenEmpty }
	'V'            { TokenV }
	'not'          { TokenNot }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenMul }
	'/'            { TokenDev }
	CMP            { TokenCmp $$ }
	'!!'           { TokenOr }
	'&&'           { TokenAnd }
	'{'            { TokenLCurly }
	'}'            { TokenRCurly }
	'if'           { TokenIf }
	'then'         { TokenThen }
	'else'         { TokenElse }
	'while'        { TokenWhile }
	';'            { TokenSemiColon }
	'='            { TokenEqual }
	'return'       { TokenReturn }
	'minimum'      { TokenAggMin }
	'maximum'      { TokenAggMax }
	'sum'          { TokenAggSum }
	'prod'         { TokenAggProd }
	'and'          { TokenAggAnd }
	'or'           { TokenAggOr }
	'<-'           { TokenLArrow }
	'in'           { TokenIn }
	'nvals'        { TokenNvals }
	','            { TokenComma }
	'['            { TokenLBrack }
	']'            { TokenRBrack }
	'|'            { TokenVbar }
	UPPER          { TokenUpper $$ }
	STRING         { TokenString $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	programSpec     rule  1
	funDefs         rules 2, 3
	funDef          rule  4
	mainDef         rule  5
	statements      rules 6, 7
	statement       rules 8, 9, 10, 11, 12
	expr            rule  13
	expr4           rules 14, 15, 16
	expr3           rules 17, 18, 19, 20, 21, 22, 23, 24
	expr2           rules 25, 26, 27
	expr1           rules 28, 29
	expr0           rules 30, 31, 32
	inExprs         rules 33, 34
	inExpr          rule  35
	agg             rules 36, 37, 38, 39, 40, 41
	gen             rules 42, 43, 44, 45
	const           rules 46, 47, 48, 49, 50
	fun             rule  51
	var             rules 52, 53, 54

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	STRING         shift, and enter state 4

	programSpec    goto state 5
	mainDef        goto state 2
	fun            goto state 3

State 1


	STRING         shift, and enter state 4

	mainDef        goto state 2
	fun            goto state 3

State 2

	programSpec -> mainDef . funDefs                    (rule 1)

	UPPER          reduce using rule 2
	STRING         reduce using rule 2
	%eof           reduce using rule 2

	funDefs        goto state 7

State 3

	mainDef -> fun . '(' ')' '{' statements '}'         (rule 5)

	'('            shift, and enter state 6


State 4

	fun -> STRING .                                     (rule 51)

	'('            reduce using rule 51


State 5

	%start_parser -> programSpec .                      (rule 0)

	%eof           accept


State 6

	mainDef -> fun '(' . ')' '{' statements '}'         (rule 5)

	')'            shift, and enter state 12


State 7

	programSpec -> mainDef funDefs .                    (rule 1)
	funDefs -> funDefs . funDef                         (rule 3)

	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11
	%eof           reduce using rule 1

	funDef         goto state 8
	var            goto state 9

State 8

	funDefs -> funDefs funDef .                         (rule 3)

	UPPER          reduce using rule 3
	STRING         reduce using rule 3
	%eof           reduce using rule 3


State 9

	funDef -> var . '=' expr ';'                        (rule 4)

	'='            shift, and enter state 15


State 10

	var -> UPPER .                                      (rule 53)

	')'            reduce using rule 53
	'+'            reduce using rule 53
	'-'            reduce using rule 53
	'*'            reduce using rule 53
	'/'            reduce using rule 53
	CMP            reduce using rule 53
	'!!'           reduce using rule 53
	'&&'           reduce using rule 53
	'}'            reduce using rule 53
	';'            reduce using rule 53
	'='            reduce using rule 53
	'<-'           reduce using rule 53
	'in'           reduce using rule 53
	','            reduce using rule 53
	']'            reduce using rule 53
	'|'            reduce using rule 53


State 11

	var -> STRING .                                     (rule 52)
	var -> STRING . '(' var ')'                         (rule 54)

	'('            shift, and enter state 14
	')'            reduce using rule 52
	'+'            reduce using rule 52
	'-'            reduce using rule 52
	'*'            reduce using rule 52
	'/'            reduce using rule 52
	CMP            reduce using rule 52
	'!!'           reduce using rule 52
	'&&'           reduce using rule 52
	'}'            reduce using rule 52
	';'            reduce using rule 52
	'='            reduce using rule 52
	'<-'           reduce using rule 52
	'in'           reduce using rule 52
	','            reduce using rule 52
	']'            reduce using rule 52
	'|'            reduce using rule 52


State 12

	mainDef -> fun '(' ')' . '{' statements '}'         (rule 5)

	'{'            shift, and enter state 13


State 13

	mainDef -> fun '(' ')' '{' . statements '}'         (rule 5)

	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statements     goto state 41
	statement      goto state 42
	var            goto state 43

State 14

	var -> STRING '(' . var ')'                         (rule 54)

	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	var            goto state 40

State 15

	funDef -> var '=' . expr ';'                        (rule 4)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 16
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 16

	funDef -> var '=' expr . ';'                        (rule 4)

	';'            shift, and enter state 66


State 17

	expr -> expr4 .                                     (rule 13)

	')'            reduce using rule 13
	';'            reduce using rule 13
	','            reduce using rule 13
	']'            reduce using rule 13
	'|'            reduce using rule 13


State 18

	expr4 -> expr3 .                                    (rule 16)
	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 16
	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            shift, and enter state 63
	'!!'           shift, and enter state 64
	'&&'           shift, and enter state 65
	';'            reduce using rule 16
	','            reduce using rule 16
	']'            reduce using rule 16
	'|'            reduce using rule 16


State 19

	expr3 -> expr2 .                                    (rule 24)

	')'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	CMP            reduce using rule 24
	'!!'           reduce using rule 24
	'&&'           reduce using rule 24
	'}'            reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	']'            reduce using rule 24
	'|'            reduce using rule 24


State 20

	expr2 -> expr1 .                                    (rule 27)

	')'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	CMP            reduce using rule 27
	'!!'           reduce using rule 27
	'&&'           reduce using rule 27
	'}'            reduce using rule 27
	';'            reduce using rule 27
	','            reduce using rule 27
	']'            reduce using rule 27
	'|'            reduce using rule 27


State 21

	expr1 -> expr0 .                                    (rule 29)

	')'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	CMP            reduce using rule 29
	'!!'           reduce using rule 29
	'&&'           reduce using rule 29
	'}'            reduce using rule 29
	';'            reduce using rule 29
	','            reduce using rule 29
	']'            reduce using rule 29
	'|'            reduce using rule 29


State 22

	expr1 -> agg . '[' expr '|' gen inExprs ']'         (rule 28)

	'['            shift, and enter state 58


State 23

	expr0 -> const .                                    (rule 30)

	')'            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	CMP            reduce using rule 30
	'!!'           reduce using rule 30
	'&&'           reduce using rule 30
	'}'            reduce using rule 30
	';'            reduce using rule 30
	','            reduce using rule 30
	']'            reduce using rule 30
	'|'            reduce using rule 30


State 24

	expr0 -> var .                                      (rule 32)

	')'            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	CMP            reduce using rule 32
	'!!'           reduce using rule 32
	'&&'           reduce using rule 32
	'}'            reduce using rule 32
	';'            reduce using rule 32
	','            reduce using rule 32
	']'            reduce using rule 32
	'|'            reduce using rule 32


State 25

	const -> INT .                                      (rule 46)

	')'            reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	CMP            reduce using rule 46
	'!!'           reduce using rule 46
	'&&'           reduce using rule 46
	'}'            reduce using rule 46
	';'            reduce using rule 46
	','            reduce using rule 46
	']'            reduce using rule 46
	'|'            reduce using rule 46


State 26

	const -> DOUBLE .                                   (rule 47)

	')'            reduce using rule 47
	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	CMP            reduce using rule 47
	'!!'           reduce using rule 47
	'&&'           reduce using rule 47
	'}'            reduce using rule 47
	';'            reduce using rule 47
	','            reduce using rule 47
	']'            reduce using rule 47
	'|'            reduce using rule 47


State 27

	const -> BOOL .                                     (rule 48)

	')'            reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	CMP            reduce using rule 48
	'!!'           reduce using rule 48
	'&&'           reduce using rule 48
	'}'            reduce using rule 48
	';'            reduce using rule 48
	','            reduce using rule 48
	']'            reduce using rule 48
	'|'            reduce using rule 48


State 28

	const -> 'empty' .                                  (rule 50)

	')'            reduce using rule 50
	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            reduce using rule 50
	'/'            reduce using rule 50
	CMP            reduce using rule 50
	'!!'           reduce using rule 50
	'&&'           reduce using rule 50
	'}'            reduce using rule 50
	';'            reduce using rule 50
	','            reduce using rule 50
	']'            reduce using rule 50
	'|'            reduce using rule 50


State 29

	const -> 'V' .                                      (rule 49)

	')'            reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	CMP            reduce using rule 49
	'!!'           reduce using rule 49
	'&&'           reduce using rule 49
	'}'            reduce using rule 49
	';'            reduce using rule 49
	','            reduce using rule 49
	']'            reduce using rule 49
	'|'            reduce using rule 49


State 30

	expr2 -> 'not' . expr1                              (rule 26)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'('            shift, and enter state 31
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr1          goto state 57
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 31

	expr0 -> '(' . expr ')'                             (rule 31)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 56
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 32

	expr2 -> '-' . expr1                                (rule 25)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'('            shift, and enter state 31
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr1          goto state 55
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 33

	expr4 -> 'if' . '(' expr3 ')' 'then' '{' expr3 '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' . '(' expr3 ')' 'then' '{' expr3 '}'    (rule 15)

	'('            shift, and enter state 54


State 34

	agg -> 'minimum' .                                  (rule 36)

	'['            reduce using rule 36


State 35

	agg -> 'maximum' .                                  (rule 37)

	'['            reduce using rule 37


State 36

	agg -> 'sum' .                                      (rule 38)

	'['            reduce using rule 38


State 37

	agg -> 'prod' .                                     (rule 39)

	'['            reduce using rule 39


State 38

	agg -> 'and' .                                      (rule 40)

	'['            reduce using rule 40


State 39

	agg -> 'or' .                                       (rule 41)

	'['            reduce using rule 41


State 40

	var -> STRING '(' var . ')'                         (rule 54)

	')'            shift, and enter state 53


State 41

	mainDef -> fun '(' ')' '{' statements . '}'         (rule 5)
	statements -> statements . statement                (rule 7)

	'}'            shift, and enter state 52
	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statement      goto state 51
	var            goto state 43

State 42

	statements -> statement .                           (rule 6)

	'}'            reduce using rule 6
	'if'           reduce using rule 6
	'while'        reduce using rule 6
	'return'       reduce using rule 6
	UPPER          reduce using rule 6
	STRING         reduce using rule 6


State 43

	statement -> var . '=' expr ';'                     (rule 8)

	'='            shift, and enter state 50


State 44

	statement -> 'if' . '(' expr ')' 'then' '{' statements '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' . '(' expr ')' 'then' '{' statements '}'    (rule 10)

	'('            shift, and enter state 49


State 45

	statement -> 'while' . '(' expr ')' '{' statements '}'    (rule 11)

	'('            shift, and enter state 48


State 46

	statement -> 'return' . var ';'                     (rule 12)

	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	var            goto state 47

State 47

	statement -> 'return' var . ';'                     (rule 12)

	';'            shift, and enter state 80


State 48

	statement -> 'while' '(' . expr ')' '{' statements '}'    (rule 11)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 79
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 49

	statement -> 'if' '(' . expr ')' 'then' '{' statements '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' . expr ')' 'then' '{' statements '}'    (rule 10)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 78
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 50

	statement -> var '=' . expr ';'                     (rule 8)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 77
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 51

	statements -> statements statement .                (rule 7)

	'}'            reduce using rule 7
	'if'           reduce using rule 7
	'while'        reduce using rule 7
	'return'       reduce using rule 7
	UPPER          reduce using rule 7
	STRING         reduce using rule 7


State 52

	mainDef -> fun '(' ')' '{' statements '}' .         (rule 5)

	UPPER          reduce using rule 5
	STRING         reduce using rule 5
	%eof           reduce using rule 5


State 53

	var -> STRING '(' var ')' .                         (rule 54)

	')'            reduce using rule 54
	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'*'            reduce using rule 54
	'/'            reduce using rule 54
	CMP            reduce using rule 54
	'!!'           reduce using rule 54
	'&&'           reduce using rule 54
	'}'            reduce using rule 54
	';'            reduce using rule 54
	'='            reduce using rule 54
	'<-'           reduce using rule 54
	'in'           reduce using rule 54
	','            reduce using rule 54
	']'            reduce using rule 54
	'|'            reduce using rule 54


State 54

	expr4 -> 'if' '(' . expr3 ')' 'then' '{' expr3 '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' . expr3 ')' 'then' '{' expr3 '}'    (rule 15)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 76
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 55

	expr2 -> '-' expr1 .                                (rule 25)

	')'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	CMP            reduce using rule 25
	'!!'           reduce using rule 25
	'&&'           reduce using rule 25
	'}'            reduce using rule 25
	';'            reduce using rule 25
	','            reduce using rule 25
	']'            reduce using rule 25
	'|'            reduce using rule 25


State 56

	expr0 -> '(' expr . ')'                             (rule 31)

	')'            shift, and enter state 75


State 57

	expr2 -> 'not' expr1 .                              (rule 26)

	')'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	CMP            reduce using rule 26
	'!!'           reduce using rule 26
	'&&'           reduce using rule 26
	'}'            reduce using rule 26
	';'            reduce using rule 26
	','            reduce using rule 26
	']'            reduce using rule 26
	'|'            reduce using rule 26


State 58

	expr1 -> agg '[' . expr '|' gen inExprs ']'         (rule 28)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 74
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 59

	expr3 -> expr3 '+' . expr3                          (rule 20)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 73
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 60

	expr3 -> expr3 '-' . expr3                          (rule 21)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 72
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 61

	expr3 -> expr3 '*' . expr3                          (rule 22)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 71
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 62

	expr3 -> expr3 '/' . expr3                          (rule 23)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 70
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 63

	expr3 -> expr3 CMP . expr3                          (rule 19)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 69
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 64

	expr3 -> expr3 '!!' . expr3                         (rule 17)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 68
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 65

	expr3 -> expr3 '&&' . expr3                         (rule 18)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 67
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 66

	funDef -> var '=' expr ';' .                        (rule 4)

	UPPER          reduce using rule 4
	STRING         reduce using rule 4
	%eof           reduce using rule 4


State 67

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 '&&' expr3 .                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 18
	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            shift, and enter state 63
	'!!'           reduce using rule 18
	'&&'           reduce using rule 18
	'}'            reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	']'            reduce using rule 18
	'|'            reduce using rule 18


State 68

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 '!!' expr3 .                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 17
	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            shift, and enter state 63
	'!!'           reduce using rule 17
	'&&'           shift, and enter state 65
	'}'            reduce using rule 17
	';'            reduce using rule 17
	','            reduce using rule 17
	']'            reduce using rule 17
	'|'            reduce using rule 17


State 69

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 CMP expr3 .                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 19
	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            reduce using rule 19
	'!!'           reduce using rule 19
	'&&'           reduce using rule 19
	'}'            reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	']'            reduce using rule 19
	'|'            reduce using rule 19


State 70

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)
	expr3 -> expr3 '/' expr3 .                          (rule 23)

	')'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	CMP            reduce using rule 23
	'!!'           reduce using rule 23
	'&&'           reduce using rule 23
	'}'            reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	']'            reduce using rule 23
	'|'            reduce using rule 23


State 71

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 '*' expr3 .                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	CMP            reduce using rule 22
	'!!'           reduce using rule 22
	'&&'           reduce using rule 22
	'}'            reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	']'            reduce using rule 22
	'|'            reduce using rule 22


State 72

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 '-' expr3 .                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            reduce using rule 21
	'!!'           reduce using rule 21
	'&&'           reduce using rule 21
	'}'            reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	']'            reduce using rule 21
	'|'            reduce using rule 21


State 73

	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 '+' expr3 .                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            reduce using rule 20
	'!!'           reduce using rule 20
	'&&'           reduce using rule 20
	'}'            reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	']'            reduce using rule 20
	'|'            reduce using rule 20


State 74

	expr1 -> agg '[' expr . '|' gen inExprs ']'         (rule 28)

	'|'            shift, and enter state 85


State 75

	expr0 -> '(' expr ')' .                             (rule 31)

	')'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	CMP            reduce using rule 31
	'!!'           reduce using rule 31
	'&&'           reduce using rule 31
	'}'            reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	']'            reduce using rule 31
	'|'            reduce using rule 31


State 76

	expr4 -> 'if' '(' expr3 . ')' 'then' '{' expr3 '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' expr3 . ')' 'then' '{' expr3 '}'    (rule 15)
	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	')'            shift, and enter state 84
	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            shift, and enter state 63
	'!!'           shift, and enter state 64
	'&&'           shift, and enter state 65


State 77

	statement -> var '=' expr . ';'                     (rule 8)

	';'            shift, and enter state 83


State 78

	statement -> 'if' '(' expr . ')' 'then' '{' statements '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' expr . ')' 'then' '{' statements '}'    (rule 10)

	')'            shift, and enter state 82


State 79

	statement -> 'while' '(' expr . ')' '{' statements '}'    (rule 11)

	')'            shift, and enter state 81


State 80

	statement -> 'return' var ';' .                     (rule 12)

	'}'            reduce using rule 12
	'if'           reduce using rule 12
	'while'        reduce using rule 12
	'return'       reduce using rule 12
	UPPER          reduce using rule 12
	STRING         reduce using rule 12


State 81

	statement -> 'while' '(' expr ')' . '{' statements '}'    (rule 11)

	'{'            shift, and enter state 90


State 82

	statement -> 'if' '(' expr ')' . 'then' '{' statements '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' expr ')' . 'then' '{' statements '}'    (rule 10)

	'then'         shift, and enter state 89


State 83

	statement -> var '=' expr ';' .                     (rule 8)

	'}'            reduce using rule 8
	'if'           reduce using rule 8
	'while'        reduce using rule 8
	'return'       reduce using rule 8
	UPPER          reduce using rule 8
	STRING         reduce using rule 8


State 84

	expr4 -> 'if' '(' expr3 ')' . 'then' '{' expr3 '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' expr3 ')' . 'then' '{' expr3 '}'    (rule 15)

	'then'         shift, and enter state 88


State 85

	expr1 -> agg '[' expr '|' . gen inExprs ']'         (rule 28)

	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	gen            goto state 86
	var            goto state 87

State 86

	expr1 -> agg '[' expr '|' gen . inExprs ']'         (rule 28)

	','            reduce using rule 33
	']'            reduce using rule 33

	inExprs        goto state 95

State 87

	gen -> var . '<-' 'nvals' 'V'                       (rule 42)
	gen -> var . '<-' 'V'                               (rule 43)
	gen -> var . '<-' 'nvals' expr1                     (rule 44)
	gen -> var . '<-' expr1                             (rule 45)

	'<-'           shift, and enter state 94


State 88

	expr4 -> 'if' '(' expr3 ')' 'then' . '{' expr3 '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' expr3 ')' 'then' . '{' expr3 '}'    (rule 15)

	'{'            shift, and enter state 93


State 89

	statement -> 'if' '(' expr ')' 'then' . '{' statements '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' expr ')' 'then' . '{' statements '}'    (rule 10)

	'{'            shift, and enter state 92


State 90

	statement -> 'while' '(' expr ')' '{' . statements '}'    (rule 11)

	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statements     goto state 91
	statement      goto state 42
	var            goto state 43

State 91

	statements -> statements . statement                (rule 7)
	statement -> 'while' '(' expr ')' '{' statements . '}'    (rule 11)

	'}'            shift, and enter state 103
	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statement      goto state 51
	var            goto state 43

State 92

	statement -> 'if' '(' expr ')' 'then' '{' . statements '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' expr ')' 'then' '{' . statements '}'    (rule 10)

	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statements     goto state 102
	statement      goto state 42
	var            goto state 43

State 93

	expr4 -> 'if' '(' expr3 ')' 'then' '{' . expr3 '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' expr3 ')' 'then' '{' . expr3 '}'    (rule 15)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 101
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 94

	gen -> var '<-' . 'nvals' 'V'                       (rule 42)
	gen -> var '<-' . 'V'                               (rule 43)
	gen -> var '<-' . 'nvals' expr1                     (rule 44)
	gen -> var '<-' . expr1                             (rule 45)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 99
	'('            shift, and enter state 31
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	'nvals'        shift, and enter state 100
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr1          goto state 98
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 95

	expr1 -> agg '[' expr '|' gen inExprs . ']'         (rule 28)
	inExprs -> inExprs . ',' inExpr                     (rule 34)

	','            shift, and enter state 96
	']'            shift, and enter state 97


State 96

	inExprs -> inExprs ',' . inExpr                     (rule 34)

	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	inExpr         goto state 108
	var            goto state 109

State 97

	expr1 -> agg '[' expr '|' gen inExprs ']' .         (rule 28)

	')'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	CMP            reduce using rule 28
	'!!'           reduce using rule 28
	'&&'           reduce using rule 28
	'}'            reduce using rule 28
	';'            reduce using rule 28
	','            reduce using rule 28
	']'            reduce using rule 28
	'|'            reduce using rule 28


State 98

	gen -> var '<-' expr1 .                             (rule 45)

	','            reduce using rule 45
	']'            reduce using rule 45


State 99

	gen -> var '<-' 'V' .                               (rule 43)
	const -> 'V' .                                      (rule 49)

	','            reduce using rule 49
			(reduce using rule 43)

	']'            reduce using rule 49
			(reduce using rule 43)



State 100

	gen -> var '<-' 'nvals' . 'V'                       (rule 42)
	gen -> var '<-' 'nvals' . expr1                     (rule 44)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 107
	'('            shift, and enter state 31
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr1          goto state 106
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 101

	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 . '}' 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 . '}'    (rule 15)
	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            shift, and enter state 63
	'!!'           shift, and enter state 64
	'&&'           shift, and enter state 65
	'}'            shift, and enter state 105


State 102

	statements -> statements . statement                (rule 7)
	statement -> 'if' '(' expr ')' 'then' '{' statements . '}' 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' expr ')' 'then' '{' statements . '}'    (rule 10)

	'}'            shift, and enter state 104
	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statement      goto state 51
	var            goto state 43

State 103

	statement -> 'while' '(' expr ')' '{' statements '}' .    (rule 11)

	'}'            reduce using rule 11
	'if'           reduce using rule 11
	'while'        reduce using rule 11
	'return'       reduce using rule 11
	UPPER          reduce using rule 11
	STRING         reduce using rule 11


State 104

	statement -> 'if' '(' expr ')' 'then' '{' statements '}' . 'else' '{' statements '}'    (rule 9)
	statement -> 'if' '(' expr ')' 'then' '{' statements '}' .    (rule 10)

	'}'            reduce using rule 10
	'if'           reduce using rule 10
	'else'         shift, and enter state 112
	'while'        reduce using rule 10
	'return'       reduce using rule 10
	UPPER          reduce using rule 10
	STRING         reduce using rule 10


State 105

	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' . 'else' '{' expr3 '}'    (rule 14)
	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' .    (rule 15)

	')'            reduce using rule 15
	'else'         shift, and enter state 111
	';'            reduce using rule 15
	','            reduce using rule 15
	']'            reduce using rule 15
	'|'            reduce using rule 15


State 106

	gen -> var '<-' 'nvals' expr1 .                     (rule 44)

	','            reduce using rule 44
	']'            reduce using rule 44


State 107

	gen -> var '<-' 'nvals' 'V' .                       (rule 42)
	const -> 'V' .                                      (rule 49)

	','            reduce using rule 49
			(reduce using rule 42)

	']'            reduce using rule 49
			(reduce using rule 42)



State 108

	inExprs -> inExprs ',' inExpr .                     (rule 34)

	','            reduce using rule 34
	']'            reduce using rule 34


State 109

	inExpr -> var . 'in' expr                           (rule 35)

	'in'           shift, and enter state 110


State 110

	inExpr -> var 'in' . expr                           (rule 35)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'if'           shift, and enter state 33
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr           goto state 115
	expr4          goto state 17
	expr3          goto state 18
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 111

	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' 'else' . '{' expr3 '}'    (rule 14)

	'{'            shift, and enter state 114


State 112

	statement -> 'if' '(' expr ')' 'then' '{' statements '}' 'else' . '{' statements '}'    (rule 9)

	'{'            shift, and enter state 113


State 113

	statement -> 'if' '(' expr ')' 'then' '{' statements '}' 'else' '{' . statements '}'    (rule 9)

	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statements     goto state 117
	statement      goto state 42
	var            goto state 43

State 114

	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' 'else' '{' . expr3 '}'    (rule 14)

	INT            shift, and enter state 25
	DOUBLE         shift, and enter state 26
	BOOL           shift, and enter state 27
	'empty'        shift, and enter state 28
	'V'            shift, and enter state 29
	'not'          shift, and enter state 30
	'('            shift, and enter state 31
	'-'            shift, and enter state 32
	'minimum'      shift, and enter state 34
	'maximum'      shift, and enter state 35
	'sum'          shift, and enter state 36
	'prod'         shift, and enter state 37
	'and'          shift, and enter state 38
	'or'           shift, and enter state 39
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	expr3          goto state 116
	expr2          goto state 19
	expr1          goto state 20
	expr0          goto state 21
	agg            goto state 22
	const          goto state 23
	var            goto state 24

State 115

	inExpr -> var 'in' expr .                           (rule 35)

	','            reduce using rule 35
	']'            reduce using rule 35


State 116

	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' 'else' '{' expr3 . '}'    (rule 14)
	expr3 -> expr3 . '!!' expr3                         (rule 17)
	expr3 -> expr3 . '&&' expr3                         (rule 18)
	expr3 -> expr3 . CMP expr3                          (rule 19)
	expr3 -> expr3 . '+' expr3                          (rule 20)
	expr3 -> expr3 . '-' expr3                          (rule 21)
	expr3 -> expr3 . '*' expr3                          (rule 22)
	expr3 -> expr3 . '/' expr3                          (rule 23)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	CMP            shift, and enter state 63
	'!!'           shift, and enter state 64
	'&&'           shift, and enter state 65
	'}'            shift, and enter state 119


State 117

	statements -> statements . statement                (rule 7)
	statement -> 'if' '(' expr ')' 'then' '{' statements '}' 'else' '{' statements . '}'    (rule 9)

	'}'            shift, and enter state 118
	'if'           shift, and enter state 44
	'while'        shift, and enter state 45
	'return'       shift, and enter state 46
	UPPER          shift, and enter state 10
	STRING         shift, and enter state 11

	statement      goto state 51
	var            goto state 43

State 118

	statement -> 'if' '(' expr ')' 'then' '{' statements '}' 'else' '{' statements '}' .    (rule 9)

	'}'            reduce using rule 9
	'if'           reduce using rule 9
	'while'        reduce using rule 9
	'return'       reduce using rule 9
	UPPER          reduce using rule 9
	STRING         reduce using rule 9


State 119

	expr4 -> 'if' '(' expr3 ')' 'then' '{' expr3 '}' 'else' '{' expr3 '}' .    (rule 14)

	')'            reduce using rule 14
	';'            reduce using rule 14
	','            reduce using rule 14
	']'            reduce using rule 14
	'|'            reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 55
Number of terminals: 39
Number of non-terminals: 20
Number of states: 120
