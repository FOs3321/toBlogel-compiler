-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Parser.y
-----------------------------------------------------------------------------


rule 20 is unused
rule 21 is unused
rule 22 is unused
rule 23 is unused

terminal UPPER is unused
terminal STRING is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> expr                              (0)
	expr -> expr4                                      (1)
	expr4 -> expr4 CMP expr3                           (2)
	expr4 -> expr3                                     (3)
	expr3 -> expr3 '+' expr2                           (4)
	expr3 -> expr3 '-' expr2                           (5)
	expr3 -> expr3 '*' expr2                           (6)
	expr3 -> expr3 '/' expr2                           (7)
	expr3 -> expr2                                     (8)
	expr2 -> '-' expr1                                 (9)
	expr2 -> "not" expr1                               (10)
	expr2 -> expr1                                     (11)
	expr1 -> expr0                                     (12)
	expr0 -> const                                     (13)
	expr0 -> '(' expr4 ')'                             (14)
	const -> INT                                       (15)
	const -> DOUBLE                                    (16)
	const -> BOOL                                      (17)
	const -> 'V'                                       (18)
	const -> "empty"                                   (19)
	fvar -> STRING '(' var ')'                         (20)
	fun -> STRING                                      (21)
	var -> STRING                                      (22)
	var -> UPPER                                       (23)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	INT            { TokenInt $$ }
	DOUBLE         { TokenDouble $$ }
	BOOL           { TokenBool $$ }
	"empty"        { TokenEmpty }
	'V'            { TokenV }
	"not"          { TokenNot }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenMul }
	'/'            { TokenDev }
	CMP            { TokenBinOp $$ }
	UPPER          { TokenUpper $$ }
	STRING         { TokenString $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	expr            rule  1
	expr4           rules 2, 3
	expr3           rules 4, 5, 6, 7, 8
	expr2           rules 9, 10, 11
	expr1           rule  12
	expr0           rules 13, 14
	const           rules 15, 16, 17, 18, 19
	fvar            rule  20
	fun             rule  21
	var             rules 22, 23

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr           goto state 16
	expr4          goto state 2
	expr3          goto state 3
	expr2          goto state 4
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 1


	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr4          goto state 2
	expr3          goto state 3
	expr2          goto state 4
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 2

	expr -> expr4 .                                     (rule 1)
	expr4 -> expr4 . CMP expr3                          (rule 2)

	CMP            shift, and enter state 24
	%eof           reduce using rule 1


State 3

	expr4 -> expr3 .                                    (rule 3)
	expr3 -> expr3 . '+' expr2                          (rule 4)
	expr3 -> expr3 . '-' expr2                          (rule 5)
	expr3 -> expr3 . '*' expr2                          (rule 6)
	expr3 -> expr3 . '/' expr2                          (rule 7)

	')'            reduce using rule 3
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	CMP            reduce using rule 3
	%eof           reduce using rule 3


State 4

	expr3 -> expr2 .                                    (rule 8)

	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	CMP            reduce using rule 8
	%eof           reduce using rule 8


State 5

	expr2 -> expr1 .                                    (rule 11)

	')'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	CMP            reduce using rule 11
	%eof           reduce using rule 11


State 6

	expr1 -> expr0 .                                    (rule 12)

	')'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	CMP            reduce using rule 12
	%eof           reduce using rule 12


State 7

	expr0 -> const .                                    (rule 13)

	')'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	CMP            reduce using rule 13
	%eof           reduce using rule 13


State 8

	const -> INT .                                      (rule 15)

	')'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	CMP            reduce using rule 15
	%eof           reduce using rule 15


State 9

	const -> DOUBLE .                                   (rule 16)

	')'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	CMP            reduce using rule 16
	%eof           reduce using rule 16


State 10

	const -> BOOL .                                     (rule 17)

	')'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	CMP            reduce using rule 17
	%eof           reduce using rule 17


State 11

	const -> "empty" .                                  (rule 19)

	')'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	CMP            reduce using rule 19
	%eof           reduce using rule 19


State 12

	const -> 'V' .                                      (rule 18)

	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	CMP            reduce using rule 18
	%eof           reduce using rule 18


State 13

	expr2 -> "not" . expr1                              (rule 10)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	'('            shift, and enter state 14

	expr1          goto state 19
	expr0          goto state 6
	const          goto state 7

State 14

	expr0 -> '(' . expr4 ')'                            (rule 14)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr4          goto state 18
	expr3          goto state 3
	expr2          goto state 4
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 15

	expr2 -> '-' . expr1                                (rule 9)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	'('            shift, and enter state 14

	expr1          goto state 17
	expr0          goto state 6
	const          goto state 7

State 16

	%start_parser -> expr .                             (rule 0)

	%eof           accept


State 17

	expr2 -> '-' expr1 .                                (rule 9)

	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	CMP            reduce using rule 9
	%eof           reduce using rule 9


State 18

	expr4 -> expr4 . CMP expr3                          (rule 2)
	expr0 -> '(' expr4 . ')'                            (rule 14)

	')'            shift, and enter state 30
	CMP            shift, and enter state 24


State 19

	expr2 -> "not" expr1 .                              (rule 10)

	')'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	CMP            reduce using rule 10
	%eof           reduce using rule 10


State 20

	expr3 -> expr3 '+' . expr2                          (rule 4)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr2          goto state 29
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 21

	expr3 -> expr3 '-' . expr2                          (rule 5)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr2          goto state 28
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 22

	expr3 -> expr3 '*' . expr2                          (rule 6)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr2          goto state 27
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 23

	expr3 -> expr3 '/' . expr2                          (rule 7)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr2          goto state 26
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 24

	expr4 -> expr4 CMP . expr3                          (rule 2)

	INT            shift, and enter state 8
	DOUBLE         shift, and enter state 9
	BOOL           shift, and enter state 10
	"empty"        shift, and enter state 11
	'V'            shift, and enter state 12
	"not"          shift, and enter state 13
	'('            shift, and enter state 14
	'-'            shift, and enter state 15

	expr3          goto state 25
	expr2          goto state 4
	expr1          goto state 5
	expr0          goto state 6
	const          goto state 7

State 25

	expr4 -> expr4 CMP expr3 .                          (rule 2)
	expr3 -> expr3 . '+' expr2                          (rule 4)
	expr3 -> expr3 . '-' expr2                          (rule 5)
	expr3 -> expr3 . '*' expr2                          (rule 6)
	expr3 -> expr3 . '/' expr2                          (rule 7)

	')'            reduce using rule 2
	'+'            shift, and enter state 20
	'-'            shift, and enter state 21
	'*'            shift, and enter state 22
	'/'            shift, and enter state 23
	CMP            reduce using rule 2
	%eof           reduce using rule 2


State 26

	expr3 -> expr3 '/' expr2 .                          (rule 7)

	')'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	CMP            reduce using rule 7
	%eof           reduce using rule 7


State 27

	expr3 -> expr3 '*' expr2 .                          (rule 6)

	')'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	CMP            reduce using rule 6
	%eof           reduce using rule 6


State 28

	expr3 -> expr3 '-' expr2 .                          (rule 5)

	')'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	CMP            reduce using rule 5
	%eof           reduce using rule 5


State 29

	expr3 -> expr3 '+' expr2 .                          (rule 4)

	')'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	CMP            reduce using rule 4
	%eof           reduce using rule 4


State 30

	expr0 -> '(' expr4 ')' .                            (rule 14)

	')'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	CMP            reduce using rule 14
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 24
Number of terminals: 15
Number of non-terminals: 11
Number of states: 31
